import json
import time
import re
from pathlib import Path
import PyPDF2
import requests

def extract_from_pdf(pdf_path):
    """Extrai dados do PDF do CID-10"""
    print(f"üìñ Extraindo dados do PDF: {pdf_path}")
    
    try:
        with open(pdf_path, 'rb') as file:
            pdf_reader = PyPDF2.PdfReader(file)
            
            diseases = []
            codigo_seq = 1
            
            for page_num in range(len(pdf_reader.pages)):
                page = pdf_reader.pages[page_num]
                text = page.extract_text()
                
                # Padr√£o para encontrar c√≥digos CID-10 e descri√ß√µes
                # Formato t√≠pico: A00.0 - Descri√ß√£o da doen√ßa
                pattern = r'([A-Z]\d{2}(?:\.\d+)?)\s*[-‚Äì]\s*([^\n]+)'
                matches = re.findall(pattern, text)
                
                for match in matches:
                    cid_code = match[0].strip()
                    description = match[1].strip()
                    
                    # Determinar categoria baseada no c√≥digo
                    categoria = get_categoria_by_cid(cid_code)
                    
                    disease = {
                        "codigo_seq": str(codigo_seq),
                        "nome": description,
                        "cid": cid_code,
                        "categoria": categoria
                    }
                    
                    diseases.append(disease)
                    codigo_seq += 1
                    
                    if codigo_seq % 100 == 0:
                        print(f"‚úÖ Processadas {codigo_seq} doen√ßas...")
            
            return diseases
            
    except Exception as e:
        print(f"‚ùå Erro ao processar PDF: {e}")
        return []

def get_categoria_by_cid(cid_code):
    """Determina a categoria baseada no c√≥digo CID"""
    categoria_map = {
        'A': 'Doen√ßas infecciosas e parasit√°rias',
        'B': 'Doen√ßas infecciosas e parasit√°rias', 
        'C': 'Neoplasias',
        'D': 'Doen√ßas do sangue e √≥rg√£os hematopo√©ticos',
        'E': 'Doen√ßas end√≥crinas, nutricionais e metab√≥licas',
        'F': 'Transtornos mentais e comportamentais',
        'G': 'Doen√ßas do sistema nervoso',
        'H': 'Doen√ßas do olho e anexos',
        'I': 'Doen√ßas do aparelho circulat√≥rio',
        'J': 'Doen√ßas do aparelho respirat√≥rio',
        'K': 'Doen√ßas do aparelho digestivo',
        'L': 'Doen√ßas da pele e tecido subcut√¢neo',
        'M': 'Doen√ßas do sistema osteomuscular',
        'N': 'Doen√ßas do aparelho geniturin√°rio',
        'O': 'Condi√ß√µes originadas no per√≠odo perinatal',
        'P': 'Condi√ß√µes originadas no per√≠odo perinatal',
        'Q': 'Malforma√ß√µes cong√™nitas',
        'R': 'Sintomas, sinais e achados anormais',
        'S': 'Les√µes, envenenamentos e outras consequ√™ncias',
        'T': 'Les√µes, envenenamentos e outras consequ√™ncias',
        'V': 'Causas externas de morbidade',
        'W': 'Causas externas de morbidade',
        'X': 'Causas externas de morbidade',
        'Y': 'Causas externas de morbidade',
        'Z': 'Fatores que influenciam o estado de sa√∫de'
    }
    
    return categoria_map.get(cid_code[0], 'Outras doen√ßas')

def import_to_cache(diseases):
    """Importa as doen√ßas para o cache existente"""
    print("üîÑ Importando para o cache...")
    
    # Carregar cache atual
    try:
        with open('doencas_cache.json', 'r', encoding='utf-8') as f:
            cache_data = json.load(f)
    except FileNotFoundError:
        cache_data = {"doencas": [], "last_update": 0}
    
    # Adicionar novas doen√ßas
    codigo_seq = len(cache_data['doencas']) + 1
    
    for disease in diseases:
        disease['codigo_seq'] = str(codigo_seq)
        cache_data['doencas'].append(disease)
        codigo_seq += 1
    
    # Atualizar timestamp
    cache_data['last_update'] = int(time.time())
    
    # Salvar cache atualizado
    with open('doencas_cache.json', 'w', encoding='utf-8') as f:
        json.dump(cache_data, f, ensure_ascii=False, indent=2)
    
    print(f"‚úÖ Cache atualizado com sucesso!")
    print(f"üìä Total de doen√ßas: {len(cache_data['doencas'])}")
    print(f"üÜï Novas doen√ßas adicionadas: {len(diseases)}")

def main():
    downloads_path = Path.home() / "Downloads"
    pdf_path = downloads_path / "CID10_oficial.pdf"
    if not pdf_path.exists():
        print(f"‚ùå Arquivo {pdf_path} n√£o encontrado.")
        return
    print(f"üéØ Processando: {pdf_path.name}")
    diseases = extract_from_pdf(pdf_path)
    if diseases:
        print(f"üìà Extra√≠das {len(diseases)} doen√ßas do PDF")
        import_to_cache(diseases)
        print("üéâ Processo conclu√≠do com sucesso!")
    else:
        print("‚ùå Nenhuma doen√ßa foi extra√≠da do PDF")

if __name__ == "__main__":
    main() 